# -*- coding: utf-8 -*-# @Time    : 2020/6/16 18:00# @Author  : 潘师傅# @File    : test.py# coding=utf-8import requests, timefrom selenium.webdriver.common.action_chains import ActionChainsimport jsonimport urllib3import reimport warningsurllib3.disable_warnings()from XFJ.PubilcMethod.WebTools import *from XFP.PubilcMethod.LonIn import *from XFP.PubilcAPI.webApi import *# addHouseUrl = 'http://192.168.10.52/xfp_api'addHouseUrl = 'https://xfpapi.xfj100.com'headers = {    'Content-Type': 'application/json',    'Accept-Language': 'zh-CN,zh;q=0.9',    'User-Agent': 'Mozilla/5.0  Chrome/81.0.4044.129 Safari/537.36',}class HousesTestCace(unittest.TestCase):    """小秘----成交确认"""    def __init__(self, *args, **kwargs):        super(HousesTestCace, self).__init__(*args, **kwargs)        self.Web = WebTools()        self.WebTooles = self.Web        # self.DL = LogIn()        # self.login_web = self.DL        # self.xfpweb = xfp_web()        # self.xfp_web = self.xfpweb    def houseData(self):        """楼盘详情"""        self.WebTooles.driver.get(url='https://gz.fang.ke.com/loupan/' + 'pg' + str(globals()['a']))        globals()['dome'] = self.WebTooles.driver.find_element_by_xpath(            '/html/body/div[6]/ul[2]/li[' + str(globals()['b'] + 1) + ']/a').get_attribute(            'href')        self.WebTooles.driver.get(url=globals()['dome'])        try:            VR1 = self.WebTooles.driver.find_element_by_xpath(                '/html/body/div[2]/div[3]/div[1]/div[2]/div/ul/li[1]/span').text            if VR1[:2] == 'VR':                VR1 = self.WebTooles.driver.find_element_by_xpath(                    '/html/body/div[2]/div[3]/div[1]/div[2]/div/ul/li[1]/span').text                if VR1[:2] == 'VR':                    globals()['VRURL'] = self.WebTooles.driver.find_element_by_xpath(                        '/html/body/div[2]/div[3]/div[1]/div[1]/ul/li[2]/a').get_attribute('href')                    globals()['VRIMG'] = self.WebTooles.driver.find_element_by_xpath(                        '/html/body/div[2]/div[3]/div[1]/div[2]/div/ul/li[1]/img').get_attribute('src')            else:                globals()['VRURL'] = None                globals()['VRIMG'] = self.WebTooles.driver.find_element_by_xpath(                    '/html/body/div[2]/div[3]/div[1]/div[2]/div/ul/li[1]/img').get_attribute('src')        except:            globals()['VRURL'] = None            globals()['VRIMG'] = self.WebTooles.driver.find_element_by_xpath(                '/html/body/div[2]/div[3]/div[1]/div[2]/div/ul/li[1]/img').get_attribute('src')        self.WebTooles.driver.get(globals()['dome'] + 'xiangqing')    def addHouses(self):        try:            self.WebTooles.Check_element(type='xpath', value='//*[@id="around_txt"]/div[2]/span')            school = (self.WebTooles.driver.find_element_by_xpath(                '//*[@id="around_txt"]/div[2]/span').text)[:-6]        except:            school = None        # 周边学校        try:            self.WebTooles.Check_element(type='xpath', value='//*[@id="around_txt"]/div[4]')            shopping = (self.WebTooles.driver.find_element_by_xpath(                '//*[@id="around_txt"]/div[4]').text)        except:            shopping = None        # 购物        try:            self.WebTooles.Check_element(type='xpath', value='//*[@id="around_txt"]/div[3]')            hospital = (self.WebTooles.driver.find_element_by_xpath(                '//*[@id="around_txt"]/div[3]').text)        except:            hospital = None        # 医院        try:            self.WebTooles.driver.find_element_by_xpath('//*[@id="around_txt"]/div[6]')            life = (self.WebTooles.driver.find_element_by_xpath(                '//*[@id="around_txt"]/div[6]').text)        except:            life = None        try:            self.WebTooles.driver.find_element_by_xpath(                '/html/body/div[2]/div[1]/table/tbody/tr[2]/td[1]')            resell = self.WebTooles.driver.find_element_by_xpath(                '/html/body/div[2]/div[1]/table/tbody/tr[2]/td[1]').text        except:            resell = None        try:            self.WebTooles.driver.find_element_by_xpath(                '/html/body/div[2]/div[1]/table/tbody/tr[2]/td[2]')            issuing_date = self.WebTooles.driver.find_element_by_xpath(                '/html/body/div[2]/div[1]/table/tbody/tr[2]/td[2]').text        except:            issuing_date = None        try:            self.WebTooles.driver.find_element_by_xpath(                '/html/body/div[2]/div[1]/table/tbody/tr[2]/td[3]')            binding_floor = self.WebTooles.driver.find_element_by_xpath(                '/html/body/div[2]/div[1]/table/tbody/tr[2]/td[3]').text        except:            binding_floor = None        try:            self.WebTooles.driver.find_element_by_xpath(                '/html/body/div[2]/div[1]/ul[3]/li[10]/span[2]')            make_house_time = self.WebTooles.driver.find_element_by_xpath(                '/html/body/div[2]/div[1]/ul[3]/li[10]/span[2]').text        except:            make_house_time = None      # 交房时间        try:            self.WebTooles.driver.find_element_by_xpath(                '/html/body/div[2]/div[1]/ul[1]/li[3]/span[2]')            house_label = self.WebTooles.driver.find_element_by_xpath(                '/html/body/div[2]/div[1]/ul[1]/li[3]/span[2]').text        except:            house_label = None          # 楼盘标签        try:            self.WebTooles.driver.find_element_by_xpath(                '/html/body/div[2]/div[1]/ul[3]/li[3]/span[2]')            area_covered = (self.WebTooles.driver.find_element_by_xpath(                                  '/html/body/div[2]/div[1]/ul[3]/li[3]/span[2]').text)[:-1]        except:            area_covered = None          # 占地面积        try:            self.WebTooles.driver.find_element_by_xpath(                '/html/body/div[2]/div[1]/ul[3]/li[5]/span[2]')            built_area = (self.WebTooles.driver.find_element_by_xpath(                                  '/html/body/div[2]/div[1]/ul[3]/li[5]/span[2]').text)[:-1]        except:            built_area = None          # 建筑面积        try:            self.WebTooles.driver.find_element_by_xpath(                '/html/body/div[2]/div[1]/ul[4]/li[1]/span[2]')            propertyCompany = self.WebTooles.driver.find_element_by_xpath(                                  '/html/body/div[2]/div[1]/ul[4]/li[1]/span[2]').text        except:            propertyCompany = None          # 物业公司        try:            self.WebTooles.driver.find_element_by_xpath(                '/html/body/div[2]/div[1]/ul[3]/li[4]/span[2]')            plot_ratio = self.WebTooles.driver.find_element_by_xpath(                                  '/html/body/div[2]/div[1]/ul[3]/li[4]/span[2]').text        except:            plot_ratio = None          # 容积率        try:            self.WebTooles.driver.find_element_by_xpath(                '/html/body/div[2]/div[1]/ul[3]/li[2]/span[2]')            green_ratio = (self.WebTooles.driver.find_element_by_xpath(                                  '/html/body/div[2]/div[1]/ul[3]/li[2]/span[2]').text)[:-1]        except:            green_ratio = None          # 绿化率        try:            self.WebTooles.driver.find_element_by_xpath(                '/html/body/div[2]/div[1]/ul[4]/li[7]/span[2]')            parking = (self.WebTooles.driver.find_element_by_xpath(                                  '/html/body/div[2]/div[1]/ul[4]/li[7]/span[2]').text)        except:            parking = None          # 停车位        try:            self.WebTooles.driver.find_element_by_xpath(                '/html/body/div[2]/div[1]/ul[3]/li[7]/span[2]')            households = (self.WebTooles.driver.find_element_by_xpath(                                  '/html/body/div[2]/div[1]/ul[3]/li[7]/span[2]').text)        except:            households = None          # 总户数        try:            self.WebTooles.driver.find_element_by_xpath(                '/html/body/div[2]/div[1]/ul[4]/li[3]/span[2]')            property_fee = (self.WebTooles.driver.find_element_by_xpath(                                  '/html/body/div[2]/div[1]/ul[4]/li[3]/span[2]').text)        except:            property_fee = None          # 物业费        try:            self.WebTooles.driver.find_element_by_xpath(                '/html/body/div[2]/div[1]/ul[1]/li[7]/span[2]')            developers = (self.WebTooles.driver.find_element_by_xpath(                                  '/html/body/div[2]/div[1]/ul[1]/li[7]/span[2]').text)        except:            developers = None          # 开发商        try:            self.WebTooles.driver.find_element_by_xpath(                '/html/body/div[2]/div[1]/ul[4]/li[5]/span[2]')            water_supply = (self.WebTooles.driver.find_element_by_xpath(                                  '/html/body/div[2]/div[1]/ul[4]/li[5]/span[2]').text)        except:            water_supply = None          # 供水        try:            self.WebTooles.driver.find_element_by_xpath(                '/html/body/div[2]/div[1]/ul[4]/li[6]/span[2]')            power_supply = (self.WebTooles.driver.find_element_by_xpath(                                  '/html/body/div[2]/div[1]/ul[4]/li[6]/span[2]').text)        except:            power_supply = None          # 供电        try:            self.WebTooles.driver.find_element_by_xpath(                '/html/body/div[2]/div[1]/ul[3]/li[8]/span[2]')            property_years = (self.WebTooles.driver.find_element_by_xpath(                                  '/html/body/div[2]/div[1]/ul[3]/li[8]/span[2]').text)        except:            property_years = None          # 产权年限        try:            self.WebTooles.driver.find_element_by_xpath(                '/html/body/div[2]/div[1]/ul[4]/li[2]/span[2]')            rarking_space_ratio = (self.WebTooles.driver.find_element_by_xpath(                                  '/html/body/div[2]/div[1]/ul[4]/li[2]/span[2]').text)        except:            rarking_space_ratio = None          # 车位配比        """添加楼盘"""        r = requests.post(url=addHouseUrl + '/api/house/house_add',                          data={                              'title': globals()['r.text']['data']['list'][globals()['b']]['title'],                              # 楼盘名字                              'price': globals()['r.text']['data']['list'][globals()['b']]['average_price'],                              # 楼盘均价                              'measurement': '元/平',  # 价格的单位                              'area': globals()['r.text']['data']['list'][globals()['b']]['city_name'],  # 楼盘所属城市                              'region': globals()['r.text']['data']['list'][globals()['b']]['district'],  # 区域                              'houseStatus': globals()['r.text']['data']['list'][globals()['b']]['sale_status'],                              # 楼盘状态                              'discount': None,  # 优惠信息                              'open_house_time': globals()['r.text']['data']['list'][globals()['b']]['open_date'],                              # 开盘时间                              'make_house_time': make_house_time,                              # 交房时间                              'map': globals()['r.text']['data']['list'][globals()['b']]['longitude'] + ',' +                                     globals()['r.text']['data']['list'][globals()['b']]['latitude'],                              # 百度地图坐标                              'huxing': globals()['r.text']['data']['list'][globals()['b']]['frame_rooms_desc'],                              # 楼盘名字                              'build_area': globals()['r.text']['data']['list'][globals()['b']]                              ['resblock_frame_area_range'],                              # 在售面积                              'house_label': house_label,                              # 楼盘标签，多个用逗号隔开                              'house_index_type': None,  # 首页分类                              'theme': globals()['r.text']['data']['list'][globals()['b']]['house_type'],                              # 特色主题                              'decoration_type': globals()['r.text']['data']['list'][globals()['b']]['decoration'],                              # 装修状况                              'address': globals()['r.text']['data']['list'][globals()['b']]['address'],                              # 楼盘地址                              'sale_tel': '4006-598-298',  # 售楼电话                              'sortid': None,  # 排序                              'status': '1',  # 状态                              'h5_image': None,  # H5推荐位封面图                              'label_image': None,  # 带标签的封面图                              'image': globals()['VRIMG'],                              # 缩略图                              'image_thumb': globals()['VRIMG'],                              # 缩略图的缩略图                              'logo': None,  # 楼盘logo                              'logo_thumb': None,  # 楼盘logo的缩略图                              'area_covered': area_covered,                              # 占地面积                              'built_area': built_area,                              # 建筑面积                              'propertyCompany': propertyCompany,                              # 物业公司                              'plot_ratio': plot_ratio,                              # 容积率                              'green_ratio': green_ratio,                              # 绿化率                              'parking': parking,                              # 停车位                              'households': households,                              # 总户数                              'resell': resell,  # 预售证                              'issuing_date': issuing_date,                              # 预售证发证日期                              'binding_floor': binding_floor,                              # 预售证绑定楼栋                              'total_num': None,                              # 总栋数                              'property_fee': property_fee,                              # 物业费                              'school': school,                              # 周边学校                              'shopping': shopping,                              # 购物                              'hospital': hospital,                              # 医院                              'life': life,  # 生活                              'happy': None,  # 娱乐                              'food': None,  # 餐饮                              'follow': None,                              # 关注人数                              'project_desc': None,                              # 项目介绍                              'create_time': None,                              # 加盘时间                              'update_time': None,                              # 更新时间                              'main_vr': globals()['VRIMG'],                              # VR封面图                              'vr': globals()['VRURL'],  # vr看房                              'tgurl': globals()['VRURL'],                              # 推广url                              'developers': developers,                              # 开发商                              'water_supply': water_supply,                              # 供水',                              'power_supply': power_supply,                              # 供电                              'property_years': property_years,                              # 产权年限                              'rarking_space_ratio': rarking_space_ratio,                              # 车位配比                              'deleted': '0',                              # 删除状态                              'add_time': None,                              'chain_ratio': None,                              # 环比描述                          },                          headers={                              "Connection": "close",                              "Accept-Encoding": 'gzip'},                          )        r.raise_for_status()        globals()['text'] = json.loads(r.text)        globals()['houseid'] = globals()['text']['msg']        print(globals()['houseid'])        globals()['title'] = globals()['r.text']['data']['list'][globals()['b']]['title']    def addHouseHuxin(self):        """添加户型"""        self.WebTooles.driver.get(globals()['dome'] + 'huxingtu')        try:            self.WebTooles.driver.find_element_by_xpath('/html/body/div[2]/div[1]/ul/li[1]/a/span')            a = self.WebTooles.driver.find_element_by_xpath('/html/body/div[2]/div[1]/ul/li[1]/a/span').text            b = 1            while b <= int(a):                imgurl = self.WebTooles.driver.find_element_by_xpath(                    '/html/body/div[2]/div[1]/div/ul/li[' + str(b) + ']/a/div/img').get_attribute('src')                ee = -1                imgurl = imgurl[:ee]                while imgurl[-1:] != 'g':                    imgurl = imgurl[:ee]                try:                    time.sleep(0.5)                    s = 1                    while s != 3:                        if s == 2:                            imgurl = self.WebTooles.driver.find_element_by_xpath(                                '/html/body/div[2]/div[1]/div/ul/li[' + str(b) +                                ']/a/div/img').get_attribute('src')                        r = requests.post(url=addHouseUrl + '/api/house/house_huxin_add',                                          data={                                              'house_id': globals()['houseid'],  # 对应的楼盘id                                              'title': self.WebTooles.driver.find_element_by_xpath(                                                  '/html/body/div[2]/div[1]/div/ul/li[' + str(b) + ']/a/span').text,  # 户型名称                                              'jianzhu': ((self.WebTooles.driver.find_element_by_xpath(                                                  '/html/body/div[2]/div[1]/div/ul/li[' + str(b) + ']/div/ul/li[2]').text)[                                                          3:])[:-2],                                              # 建筑面积                                              'taonei': None,  # 套内面积                                              'gongtan': None,  # 公摊面积                                              'price': self.WebTooles.driver.find_element_by_xpath(                                                  '/html/body/div[2]/div[1]/div/ul/li[' + str(b) + ']/div/span[1]').text,                                              # 当前户型售价                                              'sale_status': self.WebTooles.driver.find_element_by_xpath(                                                  '/html/body/div[2]/div[1]/div/ul/li[' + str(b) + ']/div/span[2]').text,                                              # 户型销售状态                                              'characteristic': None,  # 户型特色                                              'reference_price': self.WebTooles.driver.find_element_by_xpath(                                                  '/html/body/div[2]/div[1]/div/ul/li[' + str(b) + ']/div/span[1]').text,                                              # 参考价格                                              'huxin_label': None,  # 户型标签                                              'huxin_describe': None,  # 户型描述                                              'shi': (self.WebTooles.driver.find_element_by_xpath(                                                  '/html/body/div[2]/div[1]/div/ul/li[' + str(b) + ']/div/ul/li[1]').text)[                                                     3:4],                                              # 标记这个户型有几间房                                              'tin': (self.WebTooles.driver.find_element_by_xpath(                                                  '/html/body/div[2]/div[1]/div/ul/li[' + str(b) + ']/div/ul/li[1]').text)[                                                     5:6],                                              # 有几个客厅                                              'wei': (self.WebTooles.driver.find_element_by_xpath(                                                  '/html/body/div[2]/div[1]/div/ul/li[' + str(b) + ']/div/ul/li[1]').text)[                                                     7:8],                                              # 有几件卫生间                                              'chu': None,  # 几个厨房                                              'yangtai': None,  # 几个阳台                                              'iszhuli': None,  # 是否是主力户型                                              'image': imgurl,  # 户型图                                              'image_thumb': None,  # 户型缩略图                                              'sortid': None,  # 排序字段,降序排列                                              'status': 1,  # 1=>正常,2=>禁用                                              'deleted': 0,  # 删除 0 正常 1删除                                              'update_time': None,                                              'create_time': None,                                          })                        if r.status_code != 200:                            """尝试全路径"""                            r = requests.post(url=addHouseUrl + '/api/house/house_huxin_add',                                              data={                                                  'house_id': globals()['houseid'],  # 对应的楼盘id                                                  'title': self.WebTooles.driver.find_element_by_xpath(                                                      '/html/body/div[2]/div[1]/div/ul/li[' + str(b) + ']/a/span').text,                                              # 户型名称                                                  'jianzhu': ((self.WebTooles.driver.find_element_by_xpath(                                                      '/html/body/div[2]/div[1]/div/ul/li[' + str(                                                          b) + ']/div/ul/li[2]').text)[                                                              3:])[:-2],                                                  # 建筑面积                                                  'taonei': None,  # 套内面积                                                  'gongtan': None,  # 公摊面积                                                  'price': self.WebTooles.driver.find_element_by_xpath(                                                      '/html/body/div[2]/div[1]/div/ul/li[' + str(                                                          b) + ']/div/span[1]').text,                                                  # 当前户型售价                                                  'sale_status': self.WebTooles.driver.find_element_by_xpath(                                                      '/html/body/div[2]/div[1]/div/ul/li[' + str(                                                          b) + ']/div/span[2]').text,                                                  # 户型销售状态                                                  'characteristic': None,  # 户型特色                                                  'reference_price': self.WebTooles.driver.find_element_by_xpath(                                                      '/html/body/div[2]/div[1]/div/ul/li[' + str(                                                          b) + ']/div/span[1]').text,                                                  # 参考价格                                                  'huxin_label': None,  # 户型标签                                                  'huxin_describe': None,  # 户型描述                                                  'shi': (self.WebTooles.driver.find_element_by_xpath(                                                      '/html/body/div[2]/div[1]/div/ul/li[' + str(                                                          b) + ']/div/ul/li[1]').text)[                                                         3:4],                                                  # 标记这个户型有几间房                                                  'tin': (self.WebTooles.driver.find_element_by_xpath(                                                      '/html/body/div[2]/div[1]/div/ul/li[' + str(                                                          b) + ']/div/ul/li[1]').text)[                                                         5:6],                                                  # 有几个客厅                                                  'wei': (self.WebTooles.driver.find_element_by_xpath(                                                      '/html/body/div[2]/div[1]/div/ul/li[' + str(                                                          b) + ']/div/ul/li[1]').text)[                                                         7:8],                                                  # 有几件卫生间                                                  'chu': None,  # 几个厨房                                                  'yangtai': None,  # 几个阳台                                                  'iszhuli': None,  # 是否是主力户型                                                  'image': self.WebTooles.driver.find_element_by_xpath(                                                      '/html/body/div[2]/div[1]/div/ul/li[' + str(b) +                                                      ']/a/div/img').get_attribute('src'),  # 户型图                                                  'image_thumb': None,  # 户型缩略图                                                  'sortid': None,  # 排序字段,降序排列                                                  'status': 1,  # 1=>正常,2=>禁用                                                  'deleted': 0,  # 删除 0 正常 1删除                                                  'update_time': None,                                                  'create_time': None,                                              })                            if r.status_code != 200:                                print(globals()['title'] + imgurl + '户型上传失败')                            s = s + 2                            # if s == 2:                            #     b + b + 1                        else:                            s = 3                    b = b + 1                    # else:                    #     continue                except Exception as e:                    print(e)                    print(globals()['r.text']['data']['list'][globals()['b']]['title'], + imgurl + '户型上传失败')                continue        except:            pass    def addHousePhoto(self):        """相册"""        self.WebTooles.driver.get(globals()['dome'] + 'xiangce')        c = 1        while c <= 7:            try:                self.WebTooles.driver.find_element_by_xpath(                    '/html/body/div[2]/div[1]/div/div[' + str(c) + ']/h4/a')                if (self.WebTooles.driver.find_element_by_xpath(                        '/html/body/div[2]/div[1]/div/div[' + str(c) + ']/h4/a').text)[:5] == '预售许可证':                    break                elif (self.WebTooles.driver.find_element_by_xpath(                        '/html/body/div[2]/div[1]/div/div[' + str(c) + ']/h4/a').text)[:2] == 'VR':                    c = 2            except:                break            a = re.sub('\D', '', self.WebTooles.driver.find_element_by_xpath(                '/html/body/div[2]/div[1]/div/div[' + str(c) + ']/h4/a').text)            b = 1            while b <= int(a):                try:                    r = requests.post(url=addHouseUrl + '/api/house/house_photo_add',                                      data={                                          'house_id': globals()['houseid'],  # 对应的楼盘id                                          'title': globals()['r.text']['data']['list'][globals()['b']]['title'] +                                                   re.sub("[A-Za-z0-9\!\%\[\]\,\。\（\）]", "",                                                          self.WebTooles.driver.find_element_by_xpath(                                                              '/html/body/div[2]/div[1]/div/div[' +                                                              str(c) + ']/h4/a').text),  # 图片名称                                          'image': self.WebTooles.driver.find_element_by_xpath(                                              '/html/body/div[2]/div[1]/div/div[' + str(c) + ']/ul/li[' +                                              str(b) + ']/a/img').get_attribute('src'),                                          # 图片                                          'image_thumb': None,  # 图片缩略图                                          'file_type': 1,  # 默认图片  1: 图片；2:视频                                          'type': re.sub("[A-Za-z0-9\!\%\[\]\,\。\（\）]", "",                                                         self.WebTooles.driver.find_element_by_xpath(                                                             '/html/body/div[2]/div[1]/div/div[' +                                                             str(c) + ']/h4/a').text),  # 图片类型                                          'sortid': None,  #                                          'status': 1,  # 状态:1=>正常,0=>禁用',                                          'update_time': None,                                          'create_time': None,                                          'deleted': 0,  # 删除 0：正常 1：删除                                      })                    if r.status_code != 200:                        print(globals()['title'] + self.WebTooles.driver.find_element_by_xpath(                                  '/html/body/div[2]/div[1]/div/div[' + str(c) + ']/ul/li[' +                                  str(b) + ']/a/img').get_attribute('src') + '图片上传失败')                    b = b + 1                except Exception as e:                    pass                    print(e)                    print(globals()['r.text']['data']['list'][globals()['b']]['title'],                          + self.WebTooles.driver.find_element_by_xpath(                                              '/html/body/div[2]/div[1]/div/div[' + str(c) + ']/ul/li[' +                                              str(b) + ']/a/img').get_attribute('src') + '图片上传失败')                continue            c = c + 1            try:                self.WebTooles.driver.find_element_by_xpath(                    '/html/body/div[2]/div[1]/div/div[' + str(c) + ']/h4/a')                if (self.WebTooles.driver.find_element_by_xpath(                        '/html/body/div[2]/div[1]/div/div[' + str(c) + ']/h4/a').text)[:5] == '预售许可证':                    break            except:                break    def test_addHouses(self):        self.WebTooles.Openbrowser()        try:            globals()['a'] = 97            self.WebTooles.driver.get(url='https://gz.fang.ke.com/loupan/pg' + str(globals()['a']))            while globals()['a'] != 999:                r = requests.get(url='https://gz.fang.ke.com/loupan/pg' + str((globals()['a'])),                                 params={                                     '_t': '1'                                 },                                 headers=headers,                                 verify=False)                globals()['r.text'] = json.loads(r.text)                globals()['b'] = 0                while globals()['b'] != 10:                    print(globals()['r.text']['data']['list'][globals()['b']]['title'])                    self.houseData()                    self.addHouses()                    self.addHouseHuxin()                    self.addHousePhoto()                    # break                    print(globals()['r.text']['data']['list'][globals()['b']]['title'])                    globals()['b'] = globals()['b'] + 1                    time.sleep(10)                    if globals()['b'] == 10:                        self.WebTooles.driver.get(url='https://gz.fang.ke.com/loupan/pg' + str(globals()['a']))                        globals()['a'] = globals()['a'] + 1                        # break        except BaseException as e:            print(e)    def test_002(self):        try:            globals()['a'] = 97            print('https://gz.fang.ke.com/loupan/pg' + str(globals()['a']))            while globals()['a'] != 999:                r = requests.get(url='https://gz.fang.ke.com/loupan/pg' + str((globals()['a'])),                                 params={                                     '_t': '1'                                 },                                 headers=headers,                                 verify=False)                print(globals()['a'])                globals()['r.text'] = json.loads(r.text)                globals()['b'] = 0                while globals()['b'] != 10:                    print(globals()['r.text']['data']['list'][globals()['b']]['title'])                    globals()['b'] = globals()['b'] + 1                    if globals()['b'] == 10:                        globals()['a'] = globals()['a'] + 1                        # break        except BaseException as e:            print(e)    # def test005(self):    #     """"""        # self.WebTooles.Openbrowser()        # self.login_web.LogIn(method='xfp', driver=self.WebTooles.driver)        # self.xfp_web.Audit_management(driver=self.WebTooles.driver)    #     # A = 4    #     # B = 1    #     # while B <= A:    #     #     print(B)    #     #     B = B + 1    #     import re    #     # dome = '效果图（13）'    #     # print(re.sub('\D', '', dome))    #     # print(re.sub("[A-Za-z0-9\!\%\[\]\,\。\（\）]", "", dome))    #     dome = 'https://ke-image.ljcdn.com/newhouse-user-image/cee1ada2a04b301d23fda17105149b83.png.618x.jpg'    #    #     a = -1    #     dome = dome[:a]    #     # print(dome[-1:])    #     while dome[-1:] != 'g':    #         dome = dome[:a]    #     print(dome)    #